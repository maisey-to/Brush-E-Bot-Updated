// This code needs to be organized into .h files
// Use this file as the starting point to teach how to create .h files
// *******************
#include <SPI.h>
#include <Wire.h>

// RTC Registers
// ****************
#define DS3231_ADDR             0x68  ///< I2C address for DS3231
#define SD3231_READ             0xD1
#define SD3231_WRITE            0xD0

#define DS3231_SECONDS          0x00  
#define DS3231_MINUTES          0x01  
#define DS3231_HOURS            0x02  
#define DS3231_DAY              0x03  
#define DS3231_DATE             0x04  
#define DS3231_CEN_MONTH        0x05
#define DS3231_DEC_YEAR         0x06
#define DS3231_ALARM1_SECONDS   0x07
#define DS3231_ALARM1_MINUTES   0x08
#define DS3231_ALARM1_HOURS     0x09
#define DS3231_ALARM1_DAY_DATE  0x0A
#define DS3231_ALARM2_MINUTES   0x0B
#define DS3231_ALARM2_HOURS     0x0C
#define DS3231_ALARM2_DAY_DATE  0x0D
#define DS3231_CONTROL          0x0E
#define DS3231_CTL_STATUS       0x0F
#define DS3231_AGING_OFFSET     0x10
#define DS3231_TEMP_MSB         0x11
#define DS3231_TEMP_LSB         0x12
// *************************************

// SPI Pins
#define CS 10
// *************

// MAX7219 Control registers
// ****************************
#define DECODE_MODE     0x09 
#define INTENSITY       0x0A
#define SCAN_LIMIT      0x0B 
#define SHUTDOWN        0x0C
#define DISPLAY_TEST    0x0F
// ****************************

const uint8_t IMAGES[][10] = {
  {0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b00111000},
  {0b00010000, 0b00110000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00111000},
  {0b00111000, 0b01000100, 0b00000100, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01111100},
  {0b00111000, 0b01000100, 0b00000100, 0b00011000, 0b00000100, 0b00000100, 0b01000100, 0b00111000},
  {0b00000100, 0b00001100, 0b00010100, 0b00100100, 0b01000100, 0b01111100, 0b00000100, 0b00000100},
  {0b01111100, 0b01000000, 0b01000000, 0b01111000, 0b00000100, 0b00000100, 0b01000100, 0b00111000},
  {0b00111000, 0b01000100, 0b01000000, 0b01111000, 0b01000100, 0b01000100, 0b01000100, 0b00111000},
  {0b01111100, 0b00000100, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b00100000, 0b00100000},
  {0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b00111000},
  {0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b00111100, 0b00000100, 0b01000100, 0b00111000}
};
const int IMAGES_LEN = sizeof(IMAGES)/8;

void setup()   {
  pinMode(CS, OUTPUT);

  // Start I2C
  Wire.begin();

  // Start SPI
  SPI.begin();
  
  spiWriteRegister(DISPLAY_TEST, 0x01);  // Run test - All LED segments lit.
  delay(1000);
  spiWriteRegister(DISPLAY_TEST, 0x00);  // Finish test mode.

  spiWriteRegister(DECODE_MODE, 0x00);  // Disable BCD mode. 
  spiWriteRegister(INTENSITY, 0x01);  // Use lowest intensity.   
  spiWriteRegister(SCAN_LIMIT, 0x0F);  // Scan all digits.
  spiWriteRegister(SHUTDOWN, 0x01);  // Turn on chip.
}

void loop()  {
  displaySequence();
  delay(1000);
}

void displaySequence(){
  // https://xantorohara.github.io/led-matrix-editor

  uint8_t number = readTimeRegister(DS3231_SECONDS)%10;

  for (int i=1;i<9;i++)
    spiWriteRegister(i, IMAGES[number][i-1]);

}

// SPI Functions
// *******************
void spiWriteRegister(uint8_t reg, uint8_t value) { 
  SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0)); 
  digitalWrite(CS, LOW);  // start transfer  
  SPI.transfer(reg);  // Send address.
  SPI.transfer(value);  // Send the value.
  digitalWrite(CS, HIGH);  // Finish transfer.
  SPI.endTransaction();
}
// *******************

// I2C Functions
// *******************
uint8_t readRegister(uint8_t reg){
  Wire.beginTransmission(DS3231_ADDR);  // Start bit
  Wire.write(reg);  // Send command
  Wire.endTransmission();  // Stop bit

  // Request 1 byte
  Wire.requestFrom(DS3231_ADDR, 1);
  return Wire.read();  // read and return 1 byte
}

uint8_t readTimeRegister(uint8_t reg){
  Wire.beginTransmission(DS3231_ADDR);  // Start bit
  Wire.write(reg);  // send command
  Wire.endTransmission();  // Stop bit

  // Request 1 byte
  Wire.requestFrom(DS3231_ADDR, 1);
  return _fromBcd(Wire.read());  // read and return 1 byte, convert BCD to int
}

uint8_t writeRegister(uint8_t reg, uint8_t data){
  Wire.beginTransmission(DS3231_ADDR);  // Start bit
  Wire.write(reg);  // send command
  Wire.write(data);  // send data
  Wire.endTransmission();  // Stop bit
}

uint8_t writeTimeRegister(uint8_t reg, uint8_t data){
  Wire.beginTransmission(DS3231_ADDR);  // Start bit
  Wire.write(reg);  // send command
  Wire.write(_toBcd(data));  // send data, convert int to BCD
  Wire.endTransmission();  // Stop bit
}

uint8_t _toBcd(uint8_t num)
{
	uint8_t bcd = ((num / 10) << 4) + (num % 10);
	return bcd;
}

uint8_t _fromBcd(uint8_t bcd) {
	uint8_t num = (10*((bcd&0xf0) >>4)) + (bcd & 0x0f);
	return num;
}
// ******************